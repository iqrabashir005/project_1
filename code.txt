#include <iostream>
#include <string>

/*
class User consists of three functions
1.constructor to set the values
2.getUsername() to get the user name
3.getRole() to the role of users

*/
class User {
private:
    std::string username;
    std::string role;

public:
    User(const std::string& username, const std::string& role) : username(username), role(role) {}

    std::string getUsername() const {
        return username;
    }

    std::string getRole() const {
        return role;
    }
};
/*
class Authorization consists of
addUser: Adds a new user to the authorization system.
isAuthorized: Checks if a given user has a specific role.
Destructor (~Authorization): Cleans up memory by deleting dynamically allocated User objects when the Authorization object is destroyed.

*/

class Authorization {
private:
    User* users[100];
    int numUsers;

public:
    Authorization() : numUsers(0) {}

    void addUser(const std::string& username, const std::string& role) {
        if (numUsers < 100) {
            users[numUsers++] = new User(username, role);
        } else {
            std::cout << "Cannot add more users. User limit reached." << std::endl;
        }
    }

    bool isAuthorized(const std::string& username, const std::string& requiredRole) const {
        for (int i = 0; i < numUsers; ++i) {
            if (users[i]->getUsername() == username && users[i]->getRole() == requiredRole) {
                return true;
            }
        }
        return false;
    }

    ~Authorization() {
        for (int i = 0; i < numUsers; ++i) {
            delete users[i];
        }
    }
};
/*
Authentication class consists of three functions
addUser: Adds a new user with a username and password to the authentication system.
authenticate: Checks if a given username and password combination is valid.
Constructor (UserAuthentication): Initializes the numUsers member variable to 0 when a UserAuthentication object is created.*/

class UserAuthentication {
private:
    static const int MAX_USERS = 100;
    std::string usernames[MAX_USERS];
    std::string passwords[MAX_USERS];
    int numUsers;

public:
    UserAuthentication() : numUsers(0) {}

    void addUser(const std::string& username, const std::string& password) {
        if (numUsers < MAX_USERS) {
            usernames[numUsers] = username;
            passwords[numUsers] = password;
            numUsers++;
        } else {
            std::cout << "Cannot add more users. User limit reached." << std::endl;
        }
    }

    bool authenticate(const std::string& username, const std::string& password) const {
        for (int i = 0; i < numUsers; ++i) {
            if (usernames[i] == username && passwords[i] == password) {
                return true;
            }
        }
        return false;
    }
};
/*Property (Constructor): Initializes the location, size, rentalPrice, photos, and availability member variables when a Property object is created.
displayDetails: Displays the details of the property, including location, size, rental price, photos, and availability.
setAvailability: Updates the availability of the property.*/

class Property {
private:
    std::string location;
    double size;
    double rentalPrice;
    std::string photos;
    bool availability;

public:
    Property(const std::string& location, double size, double rentalPrice, const std::string& photos)
        : location(location), size(size), rentalPrice(rentalPrice), photos(photos), availability(true) {}

    void displayDetails() const {
        std::cout << "Location: " << location << std::endl;
        std::cout << "Size: " << size << " sqft" << std::endl;
        std::cout << "Rental Price: $" << rentalPrice << " per month" << std::endl;
        std::cout << "Photos: " << photos << std::endl;
        std::cout << "Availability: " << (availability ? "Available" : "Not Available") << std::endl;
    }

    void setAvailability(bool available) {
        availability = available;
    }
};
/*RentalAgreement (Constructor): Initializes the ownerName, tenantName, depositAmount, paymentSchedule, isSignedByOwner, and isSignedByTenant member variables when a RentalAgreement object is created.
signByOwner: Marks the agreement as signed by the owner.
signByTenant: Marks the agreement as signed by the tenant.
display: Displays the details of the rental agreement, including owner, tenant, deposit amount, payment schedule, and signature status.*/


class RentalAgreement {
private:
    std::string ownerName;
    std::string tenantName;
    double depositAmount;
    std::string paymentSchedule;
    bool isSignedByOwner;
    bool isSignedByTenant;

public:
    RentalAgreement(const std::string& owner, const std::string& tenant, double deposit, const std::string& schedule)
        : ownerName(owner), tenantName(tenant), depositAmount(deposit), paymentSchedule(schedule), isSignedByOwner(false), isSignedByTenant(false) {}

    void signByOwner() {
        isSignedByOwner = true;
    }

    void signByTenant() {
        isSignedByTenant = true;
    }

    void display() const {
        std::cout << "Rental Agreement Details:" << std::endl;
        std::cout << "Owner: " << ownerName << std::endl;
        std::cout << "Tenant: " << tenantName << std::endl;
        std::cout << "Deposit Amount: $" << depositAmount << std::endl;
        std::cout << "Payment Schedule: " << paymentSchedule << std::endl;
        std::cout << "Signed by Owner: " << (isSignedByOwner ? "Yes" : "No") << std::endl;
        std::cout << "Signed by Tenant: " << (isSignedByTenant ? "Yes" : "No") << std::endl;
    }
};
class OnlineRentPayment {
private:
    std::string tenantName;
    double amount;
    bool paymentStatus; // true if payment is successful, false otherwise

public:
    // Constructor
    OnlineRentPayment(std::string name, double rentAmount) : tenantName(name), amount(rentAmount), paymentStatus(false) {}

    // Method to process payment
    void processPayment() {
        // Code to handle online payment process, for demonstration purpose, we just set payment status as true
        paymentStatus = true;
        std::cout << "Payment of $" << amount << " for " << tenantName << " processed successfully.\n";
    }

    // Method to check payment status
    bool isPaymentSuccessful() {
        return paymentStatus;
    }
};
/* Default Constructor: Initializes member variables to default values.
Parameterized Constructor: Initializes member variables with provided values.
assignRequest: Assigns the maintenance request to a maintenance staff member.
isAssigned: Checks if the request has been assigned to a staff member.
getRequestDetails: Displays details of the maintenance request, including tenant name, issue description, and if assigned, the staff member it's assigned to.*/

class MaintenanceRequest {
private:
    std::string tenantName;
    std::string issueDescription;
    bool assigned;
    std::string assignedTo;

public:
    // Default constructor
    MaintenanceRequest() : tenantName(""), issueDescription(""), assigned(false), assignedTo("") {}

    // Constructor with parameters
    MaintenanceRequest(std::string name, std::string description) : tenantName(name), issueDescription(description), assigned(false), assignedTo("") {}

    // Method to assign the request to maintenance staff
    void assignRequest(std::string staffName) {
        assigned = true;
        assignedTo = staffName;
        std::cout << "Maintenance request assigned to " << staffName << " successfully.\n";
    }

    // Method to check if the request is assigned
    bool isAssigned() {
        return assigned;
    }

    // Method to get details of the maintenance request
    void getRequestDetails() {
        std::cout << "Tenant: " << tenantName << std::endl;
        std::cout << "Issue Description: " << issueDescription << std::endl;
        if (assigned) {
            std::cout << "Assigned to: " << assignedTo << std::endl;
        } else {
            std::cout << "Status: Not assigned\n";
        }
    }
};
// Define a class for managing maintenance requests
/*
Constructor: Initializes the numRequests member variable to 0 when a MaintenanceManager object is created.
addRequest: Adds a new maintenance request to the array of requests.
assignRequest: Assigns a maintenance request to a maintenance staff member.
displayRequests: Displays details of all maintenance requests stored in the array.*/

class MaintenanceManager {
private:
    static const int MAX_REQUESTS = 10; // Maximum number of maintenance requests
    MaintenanceRequest requests[MAX_REQUESTS]; // Array to store maintenance requests
    int numRequests; // Number of current maintenance requests

public:
    // Constructor
    MaintenanceManager() : numRequests(0) {}

    // Method to add a new maintenance request
    void addRequest(const std::string& name, const std::string& description) {
        if (numRequests < MAX_REQUESTS) {
            requests[numRequests] = MaintenanceRequest(name, description); // Initialize MaintenanceRequest directly
            std::cout << "New maintenance request added successfully.\n";
            numRequests++;
        } else {
            std::cout << "Maximum number of maintenance requests reached.\n";
        }
    }

    // Method to assign a request to maintenance staff
    void assignRequest(int index, std::string staffName) {
        if (index >= 0 && index < numRequests) {
            requests[index].assignRequest(staffName);
        } else {
            std::cout << "Invalid request index.\n";
        }
    }

    // Method to display all maintenance requests
    void displayRequests() {
        std::cout << "Maintenance Requests:\n";
        for (int i = 0; i < numRequests; ++i) {
            std::cout << "Request " << i + 1 << ":\n";
            requests[i].getRequestDetails();
            std::cout << std::endl;
        }
    }
};
/*
generateOccupancyReport: Generates and displays an occupancy rate report.
generateRentalIncomeReport: Generates and displays a rental income report.
generateMaintenanceHistoryReport: Generates and displays a property maintenance history report*/

class ReportingAnalytics {
public:
    // Method to generate occupancy rate report
    void generateOccupancyReport() {
        // Logic to calculate and display occupancy rates
        std::cout << "Occupancy Rate Report:\n";
        // Placeholder values for demonstration
        std::cout << "Current occupancy rate: 90%\n";
    }

    // Method to generate rental income report
    void generateRentalIncomeReport() {
        // Logic to calculate and display rental income
        std::cout << "Rental Income Report:\n";
        // Placeholder values for demonstration
        std::cout << "Total rental income for the month: $10,000\n";
    }

    // Method to generate property maintenance history report
    void generateMaintenanceHistoryReport() {
        // Logic to retrieve and display maintenance history
        std::cout << "Maintenance History Report:\n";
        // Placeholder values for demonstration
        std::cout << "Maintenance performed in the last month:\n";
        std::cout << "1. Leaky faucet fixed in apartment 101\n";
        std::cout << "2. Broken door handle replaced in apartment 202\n";
    }
};
/*
Constructor: Initializes the head pointer to NULL when a DocumentManager object is created.
addDocument: Adds a new document to the linked list of documents.
searchDocument: Searches for a document by name and displays its content if found.
displayAllDocuments: Displays details of all documents stored in the linked list.*/
class DocumentManager {
private:
    // Define a structure to represent a document
    struct Document {
        std::string name;
        std::string content;
        Document* next;

        Document(const std::string& n, const std::string& c) : name(n), content(c), next(NULL) {}
    };

    Document* head; // Pointer to the head of the linked list of documents

public:
    // Constructor
    DocumentManager() : head(NULL) {}

    // Method to add a new document
    void addDocument(const std::string& name, const std::string& content) {
        Document* newDoc = new Document(name, content);
        if (!head) {
            head = newDoc;
        } else {
            Document* current = head;
            while (current->next) {
                current = current->next;
            }
            current->next = newDoc;
        }
        std::cout << "Document '" << name << "' added successfully.\n";
    }

    // Method to search for a document by name
    void searchDocument(const std::string& name) {
        Document* current = head;
        bool found = false;
        while (current) {
            if (current->name == name) {
                std::cout << "Document '" << name << "' found:\n";
                std::cout << current->content << std::endl;
                found = true;
                break;
            }
            current = current->next;
        }
        if (!found) {
            std::cout << "Document '" << name << "' not found.\n";
        }
    }

    // Method to display all documents
    void displayAllDocuments() {
        std::cout << "All Documents:\n";
        Document* current = head;
        while (current) {
            std::cout << "Name: " << current->name << std::endl;
            std::cout << "Content: " << current->content << std::endl << std::endl;
            current = current->next;
        }
    }
};


