#include <iostream>
#include <string>

/*
class User consists of three functions
1.constructor to set the values
2.getUsername() to get the user name
3.getRole() to the role of users

*/
class User {
private:
    std::string username;
    std::string role;

public:
    User(const std::string& username, const std::string& role) : username(username), role(role) {}

    std::string getUsername() const {
        return username;
    }

    std::string getRole() const {
        return role;
    }
};
/*
class Authorization consists of
addUser: Adds a new user to the authorization system.
isAuthorized: Checks if a given user has a specific role.
Destructor (~Authorization): Cleans up memory by deleting dynamically allocated User objects when the Authorization object is destroyed.

*/

class Authorization {
private:
    User* users[100];
    int numUsers;

public:
    Authorization() : numUsers(0) {}

    void addUser(const std::string& username, const std::string& role) {
        if (numUsers < 100) {
            users[numUsers++] = new User(username, role);
        } else {
            std::cout << "Cannot add more users. User limit reached." << std::endl;
        }
    }

    bool isAuthorized(const std::string& username, const std::string& requiredRole) const {
        for (int i = 0; i < numUsers; ++i) {
            if (users[i]->getUsername() == username && users[i]->getRole() == requiredRole) {
                return true;
            }
        }
        return false;
    }

    ~Authorization() {
        for (int i = 0; i < numUsers; ++i) {
            delete users[i];
        }
    }
};
/*
Authentication class consists of three functions
addUser: Adds a new user with a username and password to the authentication system.
authenticate: Checks if a given username and password combination is valid.
Constructor (UserAuthentication): Initializes the numUsers member variable to 0 when a UserAuthentication object is created.*/

class UserAuthentication {
private:
    static const int MAX_USERS = 100;
    std::string usernames[MAX_USERS];
    std::string passwords[MAX_USERS];
    int numUsers;

public:
    UserAuthentication() : numUsers(0) {}

    void addUser(const std::string& username, const std::string& password) {
        if (numUsers < MAX_USERS) {
            usernames[numUsers] = username;
            passwords[numUsers] = password;
            numUsers++;
        } else {
            std::cout << "Cannot add more users. User limit reached." << std::endl;
        }
    }

    bool authenticate(const std::string& username, const std::string& password) const {
        for (int i = 0; i < numUsers; ++i) {
            if (usernames[i] == username && passwords[i] == password) {
                return true;
            }
        }
        return false;
    }
};


